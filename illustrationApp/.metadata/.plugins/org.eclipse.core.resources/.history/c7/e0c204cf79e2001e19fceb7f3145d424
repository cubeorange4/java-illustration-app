package com.example.illustrationApp.controller;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.web.PageableDefault;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.illustrationApp.entity.Category;
import com.example.illustrationApp.entity.User;
import com.example.illustrationApp.form.CategoryRegisterForm;
import com.example.illustrationApp.form.IllustrationRegisterForm;
import com.example.illustrationApp.repository.CategoryRepository;
import com.example.illustrationApp.security.UserDetailsImpl;
import com.example.illustrationApp.service.CategoryService;

@Controller
@RequestMapping("/category")
public class CategoryController {
	private final CategoryRepository categoryRepository;
	private final CategoryService categoryService;
	
	public CategoryController(CategoryRepository categoryRepository, CategoryService categoryService){
		this.categoryRepository = categoryRepository;
		this.categoryService = categoryService;
	}
	
	@GetMapping
	public String index(@AuthenticationPrincipal UserDetailsImpl userDetailsImpl, @PageableDefault(page = 0, size = 10, sort = "id", direction = Direction.ASC) Pageable pageable, Model model) {
		User user = userDetailsImpl.getUser();
		Page<Category> category = categoryRepository.findByUserOrderByCreatedAtDesc(user, pageable);
		
		model.addAttribute("category", category);
		
		return "category/index";
	}
	
	@GetMapping("/register")
	public String register(Model model) {
		model.addAttribute("categoryRegisterForm", new CategoryRegisterForm());
		return "category/register";
	}
	
	@PostMapping("/create")
	public String create(@ModelAttribute @Validated CategoryRegisterForm categoryRegisterForm, @AuthenticationPrincipal UserDetailsImpl userDetailsImpl, BindingResult bindingResult, RedirectAttributes redirectAttributes) {
		User user = userDetailsImpl.getUser();
		
		if(bindingResult.hasErrors()) {
			return "/category/register";
		}
		
		CategoryService.create(categoryRegisterForm, user);
		redirectAttributes.addFlashAttribute("successMessage", "タグを登録しました。");
		
		return "redirect:/category";
	}
}
